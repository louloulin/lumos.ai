name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

# 确保工作流只在每个 PR 触发一次，后续推送会取消并重启工作流
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # 代码格式检查
  fmt:
    name: 代码格式检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt

      - name: 检查代码格式
        run: cargo fmt --all -- --check

  # Clippy 代码检查
  clippy:
    name: Clippy 代码检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy

      - name: 运行 Clippy
        run: cargo clippy --all-features --workspace -- -D warnings

  # 编译检查
  check:
    name: 编译检查
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: 编译检查
        run: cargo check --all-features --workspace

  # 单元测试
  test:
    name: 单元测试
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: 运行测试
        run: cargo test --all-features --workspace

      - name: 运行文档测试
        run: cargo test --doc --all-features --workspace

  # 集成测试
  integration-test:
    name: 集成测试
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lumosai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 运行集成测试
        run: cargo test --test "*" --all-features
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/lumosai_test
          REDIS_URL: redis://localhost:6379

  # 基准测试
  benchmark:
    name: 基准测试
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 运行基准测试
        run: cargo bench --all-features --workspace

      - name: 上传基准测试结果
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: target/criterion/

  # 安全审计
  security-audit:
    name: 安全审计
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 cargo-audit
        run: cargo install cargo-audit

      - name: 运行安全审计
        run: cargo audit

  # 依赖检查
  dependency-check:
    name: 依赖检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 安装 cargo-deny
        run: cargo install cargo-deny

      - name: 检查依赖
        run: cargo deny check

  # 代码覆盖率
  coverage:
    name: 代码覆盖率
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 安装 cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: 生成覆盖率报告
        run: cargo tarpaulin --all-features --workspace --out xml

      - name: 上传到 Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./cobertura.xml
          fail_ci_if_error: true

  # 文档构建
  docs:
    name: 文档构建
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 构建文档
        run: cargo doc --all-features --workspace --no-deps

      - name: 上传文档
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc/

  # 示例构建
  examples:
    name: 示例构建
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 构建示例
        run: cargo build --examples --all-features

      - name: 运行示例测试
        run: |
          for example in $(cargo run --example 2>&1 | grep -E "^\s+" | awk '{print $1}'); do
            echo "测试示例: $example"
            timeout 30s cargo run --example "$example" || echo "示例 $example 超时或失败"
          done

  # 最终状态检查
  ci-success:
    name: CI 成功
    runs-on: ubuntu-latest
    needs: [fmt, clippy, check, test, integration-test, security-audit, dependency-check, coverage, docs, examples]
    if: always()
    steps:
      - name: 检查所有作业状态
        run: |
          if [[ "${{ needs.fmt.result }}" != "success" || \
                "${{ needs.clippy.result }}" != "success" || \
                "${{ needs.check.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.integration-test.result }}" != "success" || \
                "${{ needs.security-audit.result }}" != "success" || \
                "${{ needs.dependency-check.result }}" != "success" || \
                "${{ needs.coverage.result }}" != "success" || \
                "${{ needs.docs.result }}" != "success" || \
                "${{ needs.examples.result }}" != "success" ]]; then
            echo "❌ CI 检查失败"
            exit 1
          else
            echo "✅ 所有 CI 检查通过"
          fi
