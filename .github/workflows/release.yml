name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本 (例如: 1.0.0)'
        required: true
        type: string
      prerelease:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # 验证发布条件
  validate:
    name: 验证发布条件
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 确定版本号
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "发布版本: ${VERSION}"
          echo "发布标签: ${TAG}"

      - name: 验证版本格式
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ 无效的版本格式: $VERSION"
            exit 1
          fi
          echo "✅ 版本格式有效: $VERSION"

  # 运行完整的 CI 检查
  ci:
    name: CI 检查
    uses: ./.github/workflows/ci.yml
    needs: validate

  # 构建发布产物
  build:
    name: 构建发布产物
    runs-on: ${{ matrix.os }}
    needs: [validate, ci]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lumosai-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: lumosai-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: lumosai-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: lumosai-macos-arm64

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: 构建发布版本
        run: cargo build --release --target ${{ matrix.target }} --all-features

      - name: 创建发布包
        shell: bash
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          TARGET="${{ matrix.target }}"
          ARTIFACT_NAME="${{ matrix.artifact_name }}"
          
          # 创建发布目录
          mkdir -p "release/${ARTIFACT_NAME}"
          
          # 复制二进制文件
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${TARGET}/release/lumosai.exe" "release/${ARTIFACT_NAME}/"
            cp "target/${TARGET}/release/lumosai_cli.exe" "release/${ARTIFACT_NAME}/" || true
          else
            cp "target/${TARGET}/release/lumosai" "release/${ARTIFACT_NAME}/"
            cp "target/${TARGET}/release/lumosai_cli" "release/${ARTIFACT_NAME}/" || true
          fi
          
          # 复制文档和许可证
          cp README.md "release/${ARTIFACT_NAME}/"
          cp LICENSE "release/${ARTIFACT_NAME}/" || echo "MIT" > "release/${ARTIFACT_NAME}/LICENSE"
          cp CHANGELOG.md "release/${ARTIFACT_NAME}/" || echo "# Changelog" > "release/${ARTIFACT_NAME}/CHANGELOG.md"
          
          # 创建压缩包
          cd release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${ARTIFACT_NAME}-${VERSION}.zip" "${ARTIFACT_NAME}/"
          else
            tar -czf "${ARTIFACT_NAME}-${VERSION}.tar.gz" "${ARTIFACT_NAME}/"
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}-${{ needs.validate.outputs.version }}
          path: release/${{ matrix.artifact_name }}-${{ needs.validate.outputs.version }}.*

  # 发布到 crates.io
  publish-crates:
    name: 发布到 crates.io
    runs-on: ubuntu-latest
    needs: [validate, ci]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 登录 crates.io
        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: 发布包
        run: |
          # 按依赖顺序发布包
          PACKAGES=(
            "lumos_macro"
            "lumosai_core"
            "lumosai_vector/core"
            "lumosai_vector"
            "lumosai_evals"
            "lumosai_rag"
            "lumosai_network"
            "lumosai_cli"
            "."
          )
          
          for package in "${PACKAGES[@]}"; do
            echo "📦 发布包: $package"
            if [ "$package" = "." ]; then
              cargo publish --allow-dirty || echo "⚠️ 发布失败或已存在: $package"
            else
              cargo publish --package "$(basename "$package")" --allow-dirty || echo "⚠️ 发布失败或已存在: $package"
            fi
            
            # 等待 crates.io 处理
            sleep 30
          done

  # 创建 GitHub Release
  github-release:
    name: 创建 GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, ci, build]
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 下载所有构建产物
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: 生成发布说明
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          TAG="${{ needs.validate.outputs.tag }}"
          
          # 获取上一个标签
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # 生成发布说明
          cat > release_notes.md << EOF
          # LumosAI ${VERSION}
          
          ## 🚀 新功能和改进
          
          EOF
          
          if [ -n "$LAST_TAG" ]; then
            echo "## 📝 变更记录 (自 $LAST_TAG)" >> release_notes.md
            echo "" >> release_notes.md
            git log --oneline "$LAST_TAG"..HEAD | sed 's/^/- /' >> release_notes.md
          else
            echo "## 📝 变更记录" >> release_notes.md
            echo "" >> release_notes.md
            echo "- 初始发布" >> release_notes.md
          fi
          
          cat >> release_notes.md << EOF
          
          ## 📦 安装方式
          
          ### Cargo
          \`\`\`bash
          cargo install lumosai
          \`\`\`
          
          ### 二进制下载
          从下方的 Assets 中下载适合您平台的二进制文件。
          
          ## 🔗 相关链接
          
          - [文档](https://docs.rs/lumosai)
          - [示例](https://github.com/lumosai/lumosai/tree/main/examples)
          - [变更日志](https://github.com/lumosai/lumosai/blob/main/CHANGELOG.md)
          
          EOF

      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: LumosAI ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            artifacts/**/*

  # 更新文档
  update-docs:
    name: 更新文档
    runs-on: ubuntu-latest
    needs: [validate, ci]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Rust 工具链
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: 构建文档
        run: cargo doc --all-features --workspace --no-deps

      - name: 部署到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs/${{ needs.validate.outputs.version }}

  # 通知
  notify:
    name: 发布通知
    runs-on: ubuntu-latest
    needs: [validate, github-release, publish-crates, update-docs]
    if: always()
    steps:
      - name: 发送通知
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          TAG="${{ needs.validate.outputs.tag }}"
          
          if [[ "${{ needs.github-release.result }}" == "success" ]]; then
            echo "✅ GitHub Release 创建成功: $TAG"
          else
            echo "❌ GitHub Release 创建失败"
          fi
          
          if [[ "${{ needs.publish-crates.result }}" == "success" ]]; then
            echo "✅ crates.io 发布成功"
          else
            echo "⚠️ crates.io 发布跳过或失败"
          fi
          
          if [[ "${{ needs.update-docs.result }}" == "success" ]]; then
            echo "✅ 文档更新成功"
          else
            echo "⚠️ 文档更新跳过或失败"
          fi
          
          echo "🎉 LumosAI $VERSION 发布完成！"
