name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality checks
  quality:
    name: 📋 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🎨 Check formatting
      run: cargo fmt --all -- --check

    - name: 📎 Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: 🔍 Check documentation
      run: cargo doc --no-deps --document-private-items

  # Unit tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🔨 Build
      run: cargo build --verbose

    - name: 🧪 Run unit tests
      run: cargo test --lib --verbose
      timeout-minutes: 10

    - name: 🧪 Run documentation tests
      run: cargo test --doc --verbose
      timeout-minutes: 5

  # Integration tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, unit-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🔗 Run integration tests
      run: cargo test --tests integration --verbose
      timeout-minutes: 15

  # Example validation
  examples:
    name: 💡 Example Validation
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 💡 Validate examples
      run: |
        examples=(
          "basic_agent"
          "rag_system"
          "tool_integration"
          "memory_system"
          "vector_storage"
          "streaming_response"
          "multi_agent_workflow"
          "enhanced_features_demo"
          "performance_benchmark"
          "auth_demo"
          "monitoring_demo_simple"
          "simplified_api_complete_demo"
        )
        
        failed=0
        total=${#examples[@]}
        
        for example in "${examples[@]}"; do
          echo "🔍 Validating example: $example"
          if timeout 60 cargo run --example "$example" > /dev/null 2>&1; then
            echo "✅ Example $example passed"
          else
            echo "❌ Example $example failed"
            ((failed++))
          fi
        done
        
        echo "📊 Example validation summary: $((total - failed))/$total passed"
        
        if [ $failed -gt 0 ]; then
          echo "❌ $failed examples failed"
          exit 1
        else
          echo "✅ All examples passed"
        fi
      timeout-minutes: 20

  # Performance tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: ⚡ Run performance tests
      run: cargo test --tests performance --release --verbose
      timeout-minutes: 30

  # Coverage
  coverage:
    name: 📊 Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: 📦 Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: 📊 Generate coverage
      run: |
        cargo tarpaulin --verbose --all-features --workspace --timeout 600 \
          --exclude-files "examples/*" "tests/*" "benches/*" \
          --out Xml --out Html
      timeout-minutes: 20

    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 📊 Coverage comment
      if: github.event_name == 'pull_request'
      run: |
        coverage=$(grep -o 'line-rate="[^"]*"' cobertura.xml | head -1 | grep -o '[0-9.]*')
        coverage_percent=$(echo "$coverage * 100" | bc -l | cut -d. -f1)
        
        echo "📊 Coverage: ${coverage_percent}%"
        
        if [ "$coverage_percent" -ge 80 ]; then
          echo "✅ Coverage meets threshold (≥80%)"
        else
          echo "⚠️ Coverage below threshold (<80%)"
        fi

  # Security audit
  security:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: 🛡️ Install cargo-audit
      run: cargo install cargo-audit

    - name: 🔍 Run security audit
      run: cargo audit

  # Final status check
  test-status:
    name: ✅ Test Status
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, examples, performance, coverage, security]
    if: always()
    
    steps:
    - name: ✅ All tests passed
      if: ${{ needs.quality.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.examples.result == 'success' && needs.performance.result == 'success' && needs.coverage.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "🎉 All tests passed successfully!"
        echo "✅ Quality checks: passed"
        echo "✅ Unit tests: passed"
        echo "✅ Integration tests: passed"
        echo "✅ Examples: passed"
        echo "✅ Performance tests: passed"
        echo "✅ Coverage: passed"
        echo "✅ Security audit: passed"

    - name: ❌ Some tests failed
      if: ${{ needs.quality.result != 'success' || needs.unit-tests.result != 'success' || needs.integration-tests.result != 'success' || needs.examples.result != 'success' || needs.performance.result != 'success' || needs.coverage.result != 'success' || needs.security.result != 'success' }}
      run: |
        echo "❌ Some tests failed:"
        echo "Quality checks: ${{ needs.quality.result }}"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"
        echo "Examples: ${{ needs.examples.result }}"
        echo "Performance tests: ${{ needs.performance.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        echo "Security audit: ${{ needs.security.result }}"
        exit 1
